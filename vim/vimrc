"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Global
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Platform checking
function! MySys()
  if has("win32")
    return "windows"
  elseif has("mac")
    return "mac"
  else
    return "linux"
  endif
endfunction

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => General
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set nocompatible    " be iMproved
filetype off        " required!

"encoding
set encoding=utf-8
set fileencodings=iso-2022-jp,utf-8,cp932,euc-jp,default,latin

set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

" let Vundle manage Vundle required!
Bundle 'gmarik/vundle'
" vim-scripts repos
Bundle 'AutoClose'
Bundle 'AutoComplPop'
Bundle 'FencView.vim'
Bundle 'html5.vim'
Bundle 'jsbeautify'
Bundle 'jshint.vim'
Bundle 'jslint.vim'
Bundle 'ShowTrailingWhitespace'
Bundle 'imcoddy/snipmate.vim'
Bundle 'scrooloose/syntastic'
Bundle 'taglist.vim'
Bundle 'majutsushi/tagbar'
Bundle 'The-NERD-Commenter'
Bundle 'The-NERD-tree'
Bundle 'smarty-syntax'
Bundle 'vim-coffee-script'
Bundle "Chiel92/vim-autoformat"
Bundle "pangloss/vim-javascript"
Bundle 'digitaltoad/vim-jade'
Bundle 'Lokaltog/vim-easymotion'
Bundle 'Lokaltog/vim-powerline'
Bundle 'h2rd/vim-phpdoc'
Bundle 'wavded/vim-stylus'
Bundle 'vimwiki'
Bundle 'mattn/zencoding-vim'

"HTML indent
let g:html_indent_inctags = "html,body,head,tbody"
let g:html_indent_script1 = "inc"
let g:html_indent_style1 = "inc"

" Sets how many lines of history VIM has to remember
set history=700

" Enable filetype plugin
filetype plugin on
filetype indent on

" Set to auto read when a file is changed from the outside
set autoread
autocmd! bufwritepost .vimrc source %

" With a map leader it's possible to do extra key combinations
" like <leader>w saves the current file
let mapleader = "\\"
let g:mapleader = "\\"

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => VIM user interface
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Set 7 lines to the curors - when moving vertical..
set so=8
set number "show line number
set ignorecase smartcase "Ignore case when searching
set hlsearch "Highlight search things
set incsearch "Make search act like search in modern browsers
set magic "Set magic on, for regular expressions
set showmatch "Show matching bracets when text indicator is over them
set ruler "Always show current position

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Colors and Fonts
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
syntax enable "Enable syntax highlight
syntax on

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Text, tab and indent related
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set tabstop=4
set shiftwidth=4
set softtabstop=4
set expandtab
set autoindent
set smartindent
set wrap "Wrap lines
set lbr
set tw=500

" Show tab and space
set list
set listchars=tab:>-,trail:-

" Set tab complete
set wildmenu
set wildmode=longest:full

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Basic mapping
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" hit '/' highlights then enter search mode
nnoremap / :set hlsearch<cr>/
":let @/ = ""

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Fn key mapping
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" switch higlight no matter the previous state
:nmap <F3> :set hls! <cr>
:nmap <F4> :VimwikiAll2HTML<cr>
" Give a shortcut key to NERD Tree
:nmap <F5> :NERDTreeToggle<CR>
:nmap <F6> :TagbarToggle<CR>
:nmap <F7> :tabprev<CR>
:nmap <F8> :tabnext<CR>

" Generate coffeescript into js
" autocmd BufWritePost,FileWritePost *.coffee :silent !coffee -c <afile>

"Set JS_CMD to node in Mac
if(MySys() =="mac")
  let $JS_CMD="node"
endif
let $JS_CMD="node"

""Auto complete the matching pair
""Source: https://gist.github.com/449512
"inoremap ( <c-r>=OpenPair('(')<CR>
"inoremap ) <c-r>=ClosePair(')')<CR>
"inoremap { <c-r>=OpenPair('{')<CR>
"inoremap } <c-r>=ClosePair('}')<CR>
"inoremap [ <c-r>=OpenPair('[')<CR>
"inoremap ] <c-r>=ClosePair(']')<CR>
"" just for xml document, but need not for now.
""inoremap < <c-r>=OpenPair('<')<CR>
""inoremap > <c-r>=ClosePair('>')<CR>
"function! OpenPair(char)
    "let PAIRs = {
                "\ '{' : '}',
                "\ '[' : ']',
                "\ '(' : ')',
                "\ '<' : '>'
                "\}
    "if line('$')>2000
        "let line = getline('.')

        "let txt = strpart(line, col('.')-1)
    "else
        "let lines = getline(1,line('$'))
        "let line=""
        "for str in lines
            "let line = line . str . "\n"
        "endfor

        "let blines = getline(line('.')-1, line("$"))
        "let txt = strpart(getline("."), col('.')-1)
        "for str in blines
            "let txt = txt . str . "\n"
        "endfor
    "endif
    "let oL = len(split(line, a:char, 1))-1
    "let cL = len(split(line, PAIRs[a:char], 1))-1

    "let ol = len(split(txt, a:char, 1))-1
    "let cl = len(split(txt, PAIRs[a:char], 1))-1

    "if oL>=cL || (oL<cL && ol>=cl)
        "return a:char . PAIRs[a:char] . "\<Left>"
    "else
        "return a:char
    "endif
"endfunction
"function! ClosePair(char)
    "if getline('.')[col('.')-1] == a:char
        "return "\<Right>"
    "else
        "return a:char
    "endif
"endf

"inoremap ' <c-r>=CompleteQuote("'")<CR>
"inoremap " <c-r>=CompleteQuote('"')<CR>
"function! CompleteQuote(quote)
    "let ql = len(split(getline('.'), a:quote, 1))-1
    "let slen = len(split(strpart(getline("."), 0, col(".")-1), a:quote, 1))-1
    "let elen = len(split(strpart(getline("."), col(".")-1), a:quote, 1))-1
    "let isBefreQuote = getline('.')[col('.') - 1] == a:quote

    "if '"'==a:quote && "vim"==&ft && 0==match(strpart(getline('.'), 0, col('.')-1), "^[\t ]*$")
        "" for vim comment.
        "return a:quote
    "elseif "'"==a:quote && 0==match(getline('.')[col('.')-2], "[a-zA-Z0-9]")
        "" for Name's Blog.
        "return a:quote
    "elseif (ql%2)==1
        "" a:quote length is odd.
        "return a:quote
    "elseif ((slen%2)==1 && (elen%2)==1 && !isBefreQuote) || ((slen%2)==0 && (elen%2)==0)
        "return a:quote . a:quote . "\<Left>"
    "elseif isBefreQuote
        "return "\<Right>"
    "else
        "return a:quote . a:quote . "\<Left>"
    "endif
"endfunction

""""""""""""""""""""""""""""""
"   Plugins Configuration
""""""""""""""""""""""""""""""

""""""""""""""""""""""""""""""
"   AutoComplPop
""""""""""""""""""""""""""""""
let g:AutoComplPop_Behavior = {
\ 'c': [ {'command' : "\<C-x>\<C-o>",
\ 'pattern' : ".",
\ 'repeat' : 0}
\ ]
\}
let g:acp_noVersionWarning=1

""""""""""""""""""""""""""""""
"   easyMotion
""""""""""""""""""""""""""""""
" ホームポジションに近いキーを使う
let g:EasyMotion_keys='hjklasdfgyuiopqwertnmzxcvbHJKLASDFGYUIOPQWERTNMZXCVB'
" 「'」 + 何かにマッピング
let g:EasyMotion_leader_key=";"
" 1 ストローク選択を優先する
let g:EasyMotion_grouping=1
" カラー設定変更
hi EasyMotionTarget ctermbg=none ctermfg=red
hi EasyMotionShade  ctermbg=none ctermfg=blue

""""""""""""""""""""""""""""""
"   FencView的选项
""""""""""""""""""""""""""""""
let g:fencview_autodetect = 1    "打开文件时自动识别编码
let g:fencview_checklines = 10   "检查前后10行来判断编码

""""""""""""""""""""""""""""""
"   NERDTree的选项
""""""""""""""""""""""""""""""
nmap <leader>nt :NERDTree<cr>:set rnu<cr>
let NERDTreeShowBookmarks=1
let NERDTreeShowFiles=1
let NERDTreeShowHidden=1
let NERDTreeIgnore=['\.$','\~$']
let NERDTreeShowLineNumbers=1
let NERDTreeWinPos=1
let NERDTreeMinimalUI=1
let NERDChristmasTree=1
"autocmd VimEnter * NERDTree
"autocmd BufEnter * NERDTreeMirror


""""""""""""""""""""""""""""""
"   powerline状态栏
""""""""""""""""""""""""""""""
set nocompatible
set t_Co=256
set enc=utf-8
let termencoding=&encoding
set fileencodings=utf-8,gbk,ucs-bom,cp936
let g:Powerline_symbols = 'fancy'
set guifont=Ubuntu\ Mono\ for\ Powerline\ 12

""""""""""""""""""""""""""""""
"   Taglist (ctags)
""""""""""""""""""""""""""""""
if MySys() == "windows"                "设定windows系统中ctags程序的位置
let Tlist_Ctags_Cmd = 'ctags'
elseif MySys() == "linux"              "设定linux系统中ctags程序的位置
let Tlist_Ctags_Cmd = '/usr/bin/ctags'
endif
let Tlist_Show_One_File = 1            "不同时显示多个文件的tag，只显示当前文件的
let Tlist_Exit_OnlyWindow = 1          "如果taglist窗口是最后一个窗口，则退出vim
let Tlist_Use_Right_Window = 1         "在右侧窗口中显示taglist窗口

""""""""""""""""""""""""""""""
"   Vimwiki
""""""""""""""""""""""""""""""
let g:vimwiki_list = [{'path': '~/.vimwiki',
\ 'path_html': '~/.vimwiki/html/',
\ 'html_header': '~/.Vimwiki/template/header.tpl',}]

"Vimwiki
"if MySys() == 'linux'
  "let g:vimwiki_list = [{'path': '/home/imcoddy/Dropbox/Wiki/',
  "\ 'path_html': '/home/imcoddy/Dropbox/Wiki/html/',
  "\ 'html_header': '/home/imcoddy/Dropbox/Wiki/template/header.tpl',}]
"elseif MySys() == 'windows'
  "let g:vimwiki_list = [{'path': 'D:/My Documents/My Dropbox/Wiki/',
  "\ 'path_html': 'D:/My Documents/My Dropbox/Wiki/html/',
  "\ 'html_header': 'D:/My Documents/My Dropbox/Wiki/template/header.tpl',}]
"endif
let g:vimwiki_use_mouse = 1


